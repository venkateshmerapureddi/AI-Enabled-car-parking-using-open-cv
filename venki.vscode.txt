from fask import Flask, render_template, request, session, redirect, url_for
import cv2
import pickle
import cvzone 
import numpy as np 
import ibm_db
import re 

app = Flask(__name__)
app.secret_key = 'a'
conn = ibm_db.connect("DATABASE=bludb;HOSTNAME=9938-aec0-8105-433e-8bf9-0fbb7e483086.clogj3sd0tu0lqc")

print("connected")

@app.route(*/*)
def project():
    return render_template('index.html')

@app.route('/index.html')
def home():
    return render_template('index.html')
@app.route('/contact.html') 
def cont():
    return render_template('contact.html')
@app.route('/model')
def model():
    return render_template('model.html')

@app.route('/login.html')
def login():
    return render_template('login.html')

@app.route('/aboutus.html')
def aboutus():
    return render_template('aboutus.html')

@app.route('/signup.html')
def signup():
    return render_template('signup.html')

@app.route("/signup", methods=['POST', 'GET'])
def signup1():
    msg = ''
    if request.method == 'POST':
        name = request.form["name"]
        email = request.form["email"]
        password = request.form["password"]
        insert_sq1 = "INSERT INTO REGISTER VALUES (?,?,?)"
        prep_stmt = ibm_db.prepare(conn, insert_sq1)
        ibm_db.bind_param(prep_stmt, 1, name) 
        ibm_db.bind_param(prep_stmt, 2, email)
        ibm_db.bind_param(prep_stmt, 3, password)
        ibm_db.execute(prep_stmt)
        msg = "You have sucessfully registered!"
    return render_template('login.html', msg=msg)

@app.route("/login", methods=['POST', 'GET'])
def login1():
    if request.method == "POST":
        email = request.form["email"]
        password = request.form["password"]
        sq1 = "SELECT * FROM REGSTER WHERE EMAIL=? AND PASSWORD=?"
        stmt = ibm_db.prepare(conn, sq1)
        ibm_db.bind_param(stmt, 1, email)
        ibm_db.bind_param(stmt, 2, password)
        ibm_db.execute(stmt)
        account = ibm_db.fetch_assoc(start)
        print(account)
        if account:
            session['Loggedin'] = True
            session['id'] = account['EMAIL']
            session['email'] = account['EMAIL']
            return render_template('model.html')
        else:
            msg = "Incorrect Email/password"
            return render_template('login.html', msg=msg)
    else:
        return render_template('login.html')


@app.route('/modelq')
def liv_pred():
    cap = cv2.videocapture('carparkingInput.mp4')
    with open('parkingslotposition', 'rb') as f:
        PosList = pickle.load(f)
    width, height = 107, 48
    def checkparkingSpace(imgpro):
        spaceCounter = 0
        for pos in PosList:
            x, y = pos
            imgCrop = imgpro[y:y + height, x:x + width]
            count = cv2.countNonZero(imgcrop)
            if count < 900:
                color = (0, 255, 0)
                thickness = 3
                spaceCounter +=1
            else:
                color = (0, 0, 255)
                thickness = 2
            cv2.rectangle(img, pos, (pos[0] + width, pos[1] + height), color, thickness) 
        cvzone.putTextRect(img, f'Free: {spaceCounter}/{len(poslist)}', (100, 50), scale=3, thickness=3       
                       colorR=(200, 0, 0))             





